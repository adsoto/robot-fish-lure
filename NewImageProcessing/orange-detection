"""recognizes certain colors of the camera capture"""

import cv2 
import numpy as np 

cap = cv2.VideoCapture(0)

while True:

    ret,frame =cap.read() 
    if ret:
        into_hsv =cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)

        lower_orange= np.array([0, 100, 50], dtype = "uint8") 
        # 5, 50, 50
        # 10 100 20

        upper_orange= np.array([10, 200, 255], dtype = "uint8")
        # 25 255 255
        # 15 255 255
        
        b_mask=cv2.inRange(into_hsv,lower_orange,upper_orange)
        # creating the mask using inRange() function
        # this will produce an image where the color of the objects
        # falling in the range will turn white and rest will be black
        orange=cv2.bitwise_and(frame,frame,mask=b_mask)

        bgrorange = cv2.cvtColor(orange, cv2.COLOR_HSV2BGR) #changes color type of orange mask OUT of HSV
        greyorange = cv2.cvtColor(bgrorange, cv2.COLOR_BGR2GRAY) # greyscales the orange mask

        ret,thresh_img = cv2.threshold(greyorange, 90, 255, cv2.THRESH_BINARY) #converts the greyscale orange mask to binary
        contours, hierarchy = cv2.findContours(thresh_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) #finds the contours in thresh_img
        img_contours = np.zeros(thresh_img.shape) # creates empty image for contours
        threshcopy = cv2.cvtColor(thresh_img, cv2.COLOR_BGR2RGB) #needs to be in RBG in order to make contours colorful
        overlay = cv2.drawContours(threshcopy, contours, -1, (0,500,0), 3)  # draws the contours on an RBG image

        cv2.imshow('Orange Detection Mask',orange)  # displays the orange mask of objects
        cv2.imshow("Binary Orange", thresh_img)  # shows the thresholded binary image of the original orange contours



    else: break

    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()


"""let blobs be tracked of orange coords, have an array returned of the cords of the centroids"""